---
- name: Install vncpwd
  ansible.builtin.import_tasks: vncpwd.yml

- name: Install required packages for vnc
  ansible.builtin.include_role:
    name: cowdogmoo.workstation.package_management
  vars:
    package_management_common_install_packages: "{{ vnc_setup_common_install_packages }}"
    package_management_debian_specific_packages: "{{ vnc_setup_debian_specific_packages }}"
    package_management_redhat_specific_packages: "{{ vnc_setup_redhat_specific_packages }}"

- name: Set the default username for kali systems
  ansible.builtin.set_fact:
    vnc_default_username: "kali"
  when: ansible_distribution_release == "kali-rolling"

- name: Check if zshrc file exists
  ansible.builtin.stat:
    path: /etc/zsh/zshrc
  register: zshrc_check

- name: Ensure zsh sources /etc/profile.d scripts
  become: true
  ansible.builtin.lineinfile:
    path: /etc/zsh/zshrc
    line: "for file in /etc/profile.d/*.sh; do . $file; done"
    create: true
    insertafter: EOF
    mode: "0644"
  register: zshrc_update
  failed_when: zshrc_update is failed and not zshrc_check.stat.exists
  changed_when: zshrc_update.changed

- name: Create .vnc dirs
  become: true
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.vnc"
    state: directory
    mode: 0700
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  changed_when: false
  with_items: "{{ vnc_setup_users }}"

- name: Generate random passwords for vnc_setup_users with vnc_pw.py
  cowdogmoo.workstation.vnc_pw:
    vnc_setup_users: "{{ vnc_setup_users }}"
  register: updated_data

- name: Update vnc_setup_users with the random generated passwords
  no_log: true
  ansible.builtin.set_fact:
    vnc_setup_users_pw: "{{ vnc_setup_users_pw | default([]) + [item] }}"
  loop: "{{ updated_data.result }}"

- name: Ensure .vnc directory exists for each user
  become: true
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.vnc"
    state: directory
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
    mode: "0700"
  loop: "{{ vnc_setup_users }}"

- name: Set random passwords for vnc_setup_users (if one isn't already set)
  become: true
  no_log: true
  block:
    - name: Check if passwd file exists
      ansible.builtin.stat:
        path: "/home/{{ item.username }}/.vnc/passwd"
      register: passwd_file
      loop: "{{ vnc_setup_users_pw }}"

    - name: Generate and set password if passwd file does not exist
      ansible.builtin.shell: |
        user_home="/home/{{ item.username }}"
        mkdir -p ${user_home}/.vnc
        echo -n "{{ item.pass }}" > passwd_input
        vncpwd -f < passwd_input > ${user_home}/.vnc/passwd
        rm passwd_input
      args:
        executable: /bin/bash
      when: not passwd_file.results | selectattr('item.username', 'equalto', item.username) | map(attribute='stat.exists') | first | bool
      loop: "{{ vnc_setup_users_pw }}"
      changed_when: true

- name: Check if VNC password file exists
  become: true
  ansible.builtin.stat:
    path: "/home/{{ item.username }}/.vnc/passwd"
  register: vnc_passwd_stat
  loop: "{{ vnc_setup_users }}"
  loop_control:
    loop_var: item

- name: Set perms on vnc passwd files
  become: true
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.vnc/passwd"
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
    mode: 0700
  when: vnc_passwd_stat.results | selectattr('item.username','equalto',item.username) | map(attribute='stat.exists') | first
  with_items: "{{ vnc_setup_users }}"

- name: Create docker-entrypoint.sh
  become: true
  ansible.builtin.template:
    src: docker-entrypoint.sh.j2
    dest: "/run/docker-entrypoint.sh"
    mode: 0755

- name: Configure systemd auto-start service
  ansible.builtin.import_tasks: systemd.yml
  when: vnc_setup_systemd|bool
